 Search in Rotated Sorted Array
Medium

2395

310

Favorite

Share
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

class Solution {
    public int search(int[] nums, int target) {
    int high = nums.length-1;
    int low = 0;
    int arr [] = {-1,-1};
        binarysearch(nums,high,low,target,arr);
    }
    public void binarysearch(int [] nums, int high, int low, int target,int [] arr)
    {
        if(nums.length == 0 || nums== null)
            return arr;
        if(nums[high]==target && nums[low]==target)
        {
            arr[0]=low;
            arr[1]=mid;
            return arr;
        }
        while(low<=high)
        {
            int mid = (high+low)/2;
            if(nums[mid]==target)
            {
                int x=mid;
                int y=mid;
                while(nums[mid]!=target)
                {
                   x--;
                    mid--;
                }
                 while(nums[mid]!=target)
                {
                   y++;
                    mid++;
                }
                arr[0]=x;
                arr[1]=y;
                if(x==y)
                {
                    arr[1]=-1;
                }
            }
            if(nums[mid]<target)
                binarysearch(nums,mid+1,hightarget,arr);
                else
                binarysearch(nums,)
        }
    }
}
