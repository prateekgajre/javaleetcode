/**
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode p=l1;
        ListNode q=l2;
        ListNode sumnode=dummy;
        
        int carry = 0;
        while(p!=null || q!=null)
        {
            int x,y;
            if(p==null)
                x=0;
            else
                x=p.val;
            if(q==null)
                y=0;
            else
                y=q.val;
            int sum=x+y+carry;
            carry = sum/10;
            
            sumnode.next = new ListNode(sum%10);
            sumnode=sumnode.next;
            System.out.println(sumnode.val);

            if(p!=null)
                p=p.next;
            if(q!=null)
                q=q.next;
                
        }
        if(carry>0)
        {
            sumnode.next=new ListNode(carry);
        }
        return dummy.next;
    }
}
